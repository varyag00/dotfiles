#+title: Config
#+author: Daniel Gonzalez
#+description: Dan's personal doom emacs config
#+created: [2021-10-16 Sat 19:15]
#+last_modified: [2022-02-08 Tue 17:33]

* Info
This is my personal [[https://github.com/hlissner/doom-emacs][doom emacs]] config. It is a work-in-progress and may never be fully released.
** "Literate config"
Due to =org-babel=, configuration files can be written in org-mode as .org files, where the code block will be executed as the target configuration.
** How to use
To enable literate config support in doom emacs, the =literate= flag must be enabled in =init.el=.
Once enabled, whenever a ~doom sync~ is ran the code blocks within a =config.org= will be tangled (extracted) to =config.el=, creating "normal" configuration.
* Configuration
** base
#+begin_src elisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!

;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets.
(setq user-full-name "Daniel Gonzalez"
      user-mail-address "d.gonzalez0902@gmail.com")

;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
;; are the three important ones:
;;
;; + `doom-font'
;; + `doom-variable-pitch-font'
;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;;
;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
;; font string. You generally only need these two:
;; (setq doom-font (font-spec :family "monospace" :size 12 :weight 'semi-light)
;;       doom-variable-pitch-font (font-spec :family "sans" :size 13))


;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
;;(setq display-line-numbers-type t)
(setq display-line-numbers-type 'relative)

#+end_src
*** BACKLOG set doom-big-font for presentations
** doom theme
I switch between a couple of doom themes throughout the day to try and reduce eye strain. The function ~synchronize-theme~ runs every 900s (15m)
#+begin_src elisp
;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
(setq doom-theme 'doom-one-light)
(setq doom-font (font-spec :family "JetBrains Mono" :size 12))
;; (setq doom-font (font-spec :family "JetBrainsMonoNL NF" :size 12))

(defun synchronize-theme ()
  "Change doom colour theme at specified times of day."
  (let* ((light-theme 'doom-one-light)
         (dark-theme 'doom-shades-of-purple)
         (start-time-light-theme 8)
         (end-time-light-theme 17)
         (hour (string-to-number (substring (current-time-string) 11 13)))
         (next-theme (if (member hour (number-sequence start-time-light-theme end-time-light-theme))
                         light-theme dark-theme)))
    (when (not (equal doom-theme next-theme))
      (setq doom-theme next-theme)
      (load-theme next-theme))))

(run-with-timer 0 900 'synchronize-theme)
#+end_src
** org-mode configuration
This is the messiest part of my configuration and is heavily WIP.
#+begin_src elisp
;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
(setq org-directory "~/Dropbox/org/")

;; Here are some additional functions/macros that could help you configure Doom:
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c g k').
;; This will open documentation for it, including demos of how they are used.
;;
;; You can also try 'gd' (or 'C-c g d') to jump to their definition and see how
;; they are implemented.

;; TODO make setup code cleaner

;; used for publishing static site with hugo
(use-package! ox-hugo
  :after ox)

;; TODO fix org-habit (is that even correct?) loading
;; org extension modules
(setq org-modules
        '(
        ;; org-bookmark
        org-habit))

(defun dan/org-mode-hook ()
  "Run this when org mode is loaded."

    ;;Global minor mode to keep your Org-roam session automatically synchronized on save
    ;;TODO seems to lag the crap out of emacs, and nodes seem to stay synched without, eval if needed
    ;; (org-roam-db-autosync-mode)

    ;; open org files showing all headlines, hiding everything all
    (setq org-startup-folded 'content
        org-src-tab-acts-natively t
        org-src-fontify-natively t
        org-hide-block-startup nil
        org-cycle-separator-lines 2
        org-ellipsis " â–¾")

    ;;Increase size of header font
    (set-face-attribute `org-document-title nil :weight 'bold :height 1.7)
    (set-face-attribute `org-level-1 nil :weight 'semi-bold :height 1.4)
    (set-face-attribute `org-level-2 nil :weight 'semi-bold :height 1.25)
    (set-face-attribute `org-level-3 nil :weight 'semi-bold :height 1.2)

    ;; set the value of face for each list element
    (dolist (face '(org-level-4
                    org-level-5
                    org-level-6
                    org-level-7
                    org-level-8))
        (set-face-attribute face nil :weight 'semi-bold :height 1.15))

  ;; not sure how I feel about this one, it makes emphasis hard to remove (unless I'm missing a keybinding...)
  ;; (setq org-hide-emphasis-markers t)
  ;; these already run with (org +pretty) doom config
 ;;
 ;; (setq org-superstar-prettify-item-bullets t)
 ;; (setq org-superstar-prettify-leading-stars t)
 ;;
  ;; (setq org-hide-leading-stars t
  ;;       org-pretty-entities t
  ;;     ;; org-hide-emphasis-markers nil
  ;; )

  ;; updates last modified time
  ;; NOTE: requires that org capture templates include last_modified: in the first 8 lines
  ;; so this is added in the capture templates above
  ;; use setq-local because these vars should only be changed for org-mode, not globally
  (setq-local
   time-stamp-start "#\\+last_modified:[ \t]*"
   time-stamp-active t
   time-stamp-end "$"
   time-stamp-format "\[%Y-%02m-%02d %3a %02H:%02M\]")
  (add-hook 'before-save-hook 'time-stamp nil 'local)
)
;; run before org-mode starts
(add-hook 'org-mode-hook 'dan/org-mode-hook)

;; Key bindings
(evil-define-key '(normal insert visual) org-mode-map (kbd "C-j") 'org-next-visible-heading)
(evil-define-key '(normal insert visual) org-mode-map (kbd "C-k") 'org-previous-visible-heading)


;; ----------------------------------------------------------------------
;; org-mode functions
;; ----------------------------------------------------------------------

;; hide properties drawers
(defun org-hide-properties ()
  "Hide all org-mode headline property drawers in buffer. Could be slow if it has a lot of overlays."
  (interactive)
  (save-excursion
    (goto-char (point-min))
    (while (re-search-forward
            "^ *:properties:\n\\( *:.+?:.*\n\\)+ *:end:\n" nil t)
      (let ((ov_this (make-overlay (match-beginning 0) (match-end 0))))
        (overlay-put ov_this 'display "")
        (overlay-put ov_this 'hidden-prop-drawer t))))
  (put 'org-toggle-properties-hide-state 'state 'hidden))

(defun org-show-properties ()
  "Show all org-mode property drawers hidden by org-hide-properties."
  (interactive)
  (remove-overlays (point-min) (point-max) 'hidden-prop-drawer t)
  (put 'org-toggle-properties-hide-state 'state 'shown))

(defun org-toggle-properties ()
  "Toggle visibility of property drawers."
  (interactive)
  (if (eq (get 'org-toggle-properties-hide-state 'state) 'hidden)
      (org-show-properties)
    (org-hide-properties)))

(defun my/org-retrieve-url-from-point ()
  "Copies the URL from an org link at the point
  source: https://hungyi.net/posts/copy-org-mode-url/"
  (interactive)
  (let ((plain-url (url-get-url-at-point)))
    (if plain-url
        (progn
          (kill-new plain-url)
          (message (concat "Copied: " plain-url)))
      (let* ((link-info (assoc :link (org-context)))
             (text (when link-info
                     (buffer-substring-no-properties
                      (or (cadr link-info) (point-min))
                      (or (caddr link-info) (point-max))))))
        (if (not text)
            (error "Oops! Point isn't in an org link")
          (string-match org-link-bracket-re text)
          (let ((url (substring text (match-beginning 1) (match-end 1))))
            (kill-new url)
            (message (concat "Copied: " url))))))))

;; (use-package! org
(after! org
  :config
  (map! :map org-mode-map
        :localleader
        (:prefix ("l" . "links")
         "y" #'my/org-retrieve-url-from-point))

;; needs to be set before org mode loads, outside of the org-mode-hook
  (setq
        ;; | divides between "active" and "done" statuses
        org-todo-keywords '((sequence "DOING(d!)" "NEXT(n!)" "TODO(t!)" "PLANNED(p!)" "BACKLOG(l!)" "BLOCKED(b!)" "DELEGATED(g!)" "WAITING(w!)" "FOLLOWUP(f!)" "INREVIEW(r!)" "|" "DONE(F!)" "CANCELLED(C!)" ))
        org-todo-keyword-faces
        ;; TODO try adding a :background!
        '(("TODO" :foreground "#98BE65" :weight bold)
        ("NEXT" :foreground "MediumSeaGreen" :weight bold)
        ("PLANNED" :foreground "DarkGoldenrod" :weight bold)
        ("WAITING" :foreground "LightSkyBlue" :weight bold)
        ("DOING" :foreground "DodgerBlue1" :weight bold)
        ("BACKLOG" :foreground "SeaGreen" :weight bold)
        ("INREVIEW" :foreground "gold1" :weight bold)
        ("FOLLOWUP" :foreground "LightSalmon" :weight bold)
        ("BLOCKED" :foreground "firebrick2" :weight bold)
        ("DELEGATED" :foreground "LightPink" :weight bold)
        ("DONE" :foreground "LightSlateGray" :weight bold :strike-through t)
        ("CANCELLED" :foreground "LightSlateGray" :weight bold :strike-through t))
    )
  ;; (setq org-attach-dir-relative t)
  )


;; I never really use these
(setq org-tag-alist (quote (("@errand" . ?e)
                            ("@office" . ?o)
                            ("@home" . ?h)
                            )))

;; org-roam configuration
(setq org-roam-directory (file-truename "~/Dropbox/org/org-roam/")
      org-id-link-to-org-use-id t)

(setq org-roam-dailies-directory "journal/")

;; "j" because I was user of org-journal before org-roam-dailies
(map! :leader
      (:prefix ("j" . "org-roam-dailies")
        :desc "Create new daily entry" "j" #'org-roam-dailies-goto-today
        :desc "Quickly capture for today" "c" #'org-roam-dailies-capture-today
        :desc "Open previous entry" "p" #'org-roam-dailies-goto-previous-note
        :desc "Open next entry" "n" #'org-roam-dailies-goto-next-note
        :desc "Search for entry" "s" #'org-roam-dailies-goto-date))

;; load org-roam early
;;(use-package! org-roam)
  ;;:after
  ;;:config
  ;; doesn't seem to work as documented, the buffer still displays
  ;;(setq-local +org-roam-open-buffer-on-find-file nil))

(use-package! org-roam
  :ensure t

  (require 'org-roam-protocol)
                        )

;; source: systemcrafter's org-roam hacks config
;; https://systemcrafters.net/build-a-second-brain-in-emacs/5-org-roam-hacks/#automatically-copy-or-move-completed-tasks-to-dailies

;;   ;; TODO testing adding this function manually... try removing it in the future
;;   (defun org-roam-dailies--capture (time &optional goto)
;;   "Capture an entry in a daily-note for TIME, creating it if necessary.

;; When GOTO is non-nil, go the note without creating an entry."
;;   (org-roam-capture- :goto (when goto '(4))
;;                      :node (org-roam-node-create)
;;                      :templates org-roam-dailies-capture-templates
;;                      :props (list :override-default-time time))
;;   (when goto (run-hooks 'org-roam-dailies-find-file-hook)))


;; TODO fix this
  ;; when region is evaled, it move all text BELOW the task to DONE because it is added to the hook twice
;; (defun dan/org-roam-copy-todo-to-today ()
;;   (interactive)
;;   (let ((org-refile-keep nil) ;; Set this to nil to delete the original, t to keep it and copy instead of move
;;         (org-roam-dailies-capture-templates
;;           '(("t" "tasks" entry "%?"
;;                 ;; if problems, try removing +olp
;;                 ;; #+title: %<%A, %Y-%m-%d>\n#+created: %U\n#+last_modified: %U\n\n* Thoughts\n* Completed Personal Tasks\n* Completed Work Tasks
;;              :if-new (file+head+olp "%<%Y%m%d>.org" "#+title: %<%A, %Y-%m-%d>\n#+created: %U\n#+last_modified: %U\n\n* Thoughts\n* Completed Personal Tasks\n* Completed Work Tasks\n* Completed Tasks" ("Completed Tasks")))))
;;         (org-after-refile-insert-hook #'save-buffer)
;;         today-file
;;         pos)
;;     (save-window-excursion
;;       (org-roam-dailies--capture (current-time) t)
;;       (setq today-file (buffer-file-name))
;;       (setq pos (point)))

;;     ;; Only refile if the target file is different than the current file
;;     (unless (equal (file-truename today-file)
;;                    (file-truename (buffer-file-name)))
;;       (org-refile nil nil (list "Tasks" today-file nil pos)))))

;; (add-to-list 'org-after-todo-state-change-hook
;;              (lambda ()
;;                (when (equal org-state "DONE")
;;                  (dan/org-roam-copy-todo-to-today))))
;; )

;; TODO might need a newer version of org-roam, currently it breaks saves
;; (use-package! org-roam-timestamps
;;   :after org-roam
;;   :config (org-roam-timestamps-mode))

;; allows communication with external apps, such as chrome for org-roam-server
;; must register the protocol before use, see https://www.orgroam.com/manual.html#Org_002droam-Protocol
;; (require 'org-roam-protocol)


;; ----------------------------------------------------------------------
;; org-roam capture templates
;; ----------------------------------------------------------------------

(setq org-roam-capture-templates
 `(("d" "default" plain "%?"
  :target (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                     "#+title: ${title}\n#+created: %U\n#+last_modified: %U\n#+filetags: \n\n")
  :unnarrowed t))
 )

;; daily journal capture templates
(setq org-roam-dailies-capture-templates
      '(("d" "default" entry
         "* %?"
         :target (file+head "%<%Y%m%d>.org"
                            "#+title: %<%A, %Y-%m-%d>\n#+created: %U\n#+last_modified: %U\n\n* Thoughts\n* Completed Personal Tasks\n* Completed Work Tasks\n* Completed Tasks"
                            ))))

;; for notes captured by org-roam-ref protocol
(setq org-roam-capture-ref-templates
      '(
        ("r" "ref" plain "%?"
     :target (file+head "${slug}.org"
                        "#+title: ${title}\n#+created: %U\n#+last_modified: %U\n#+filetags: \n\n")
     :unnarrowed t)
        ;; captured via bookmarklet, tagged :annotation:
        ("b" "ref" plain "%?"
     :target (file+head "${slug}.org"
                        "#+title: ${title}\n#+created: %U\n#+last_modified: %U\n#+filetags: :annotation: \n\n")
     :unnarrowed t)
        )
 )

#+end_src
** deft config
#+begin_src elisp

;; from: https://github.com/jrblevin/deft/issues/75#issuecomment-905031872
(defun cm/deft-parse-title (file contents)
    "Parse the given FILE and CONTENTS and determine the title.
    If `deft-use-filename-as-title' is nil, the title is taken to
    be the first non-empty line of the FILE.  Else the base name of the FILE is
    used as title."
    (let ((begin (string-match "^#\\+[tT][iI][tT][lL][eE]: .*$" contents)))
    (if begin
    (string-trim (substring contents begin (match-end 0)) "#\\+[tT][iI][tT][lL][eE]: *" "[\n\t ]+")
    (deft-base-filename file))))

(advice-add 'deft-parse-title :override #'cm/deft-parse-title)

(setq deft-strip-summary-regexp
    (concat "\\("
    "[\n\t]" ;; blank
    "\\|^#\\+[[:alpha:]_]+:.*$" ;; org-mode metadata
    "\\|^:PROPERTIES:\n\\(.+\n\\)+:END:\n"
    "\\)")
    deft-directory "~/Dropbox/org"
    deft-extensions '("md" "org" "txt")
    deft-recursive t
    )

#+end_src

#+RESULTS:
: t

** WSL2 configuration
I run emacs in a WSL2 ubuntu distro, so I've added some configuration for better quality of life.
#+begin_src elisp
;; use windows default browser when running under wsl
(when (and (eq system-type 'gnu/linux)
           (string-match
            "Linux.*Microsoft.*Linux"
            (shell-command-to-string "uname -a")))
  (setq
   browse-url-generic-program  "/mnt/c/Windows/System32/cmd.exe"
   browse-url-generic-args     '("/c" "start")
   browse-url-browser-function #'browse-url-generic))

#+end_src

** Other configuration
#+begin_src elisp
;; evil mappings
(evil-define-key '(normal insert visual) org-mode-map (kbd "C-a") 'evil-numbers/inc-at-pt)
;; because C-x is useful and ~g =~ and ~g -~ also work
(evil-define-key '(normal insert visual) org-mode-map (kbd "C-S-a") 'evil-numbers/dec-at-pt)

;; follow the cursor around
(after! treemacs
  :config
  (setq treemacs-follow-mode 't)
  ;; TODO if these mess things up, remove them and just up ~SPC o P~
  ;; (map! "C-1" #'winum-select-window-1)
  ;; (map! "C-2" #'winum-select-window-2)
  ;; (map! "C-3" #'winum-select-window-3)
  ;; (map! "C-4" #'winum-select-window-4)
  ;; (map! "C-5" #'winum-select-window-5)
  )
#+end_src
** extra keyboard shortcuts
#+begin_src elisp
;; enable emojis
(add-hook 'after-init-hook #'global-emojify-mode)

;; window navigation shortcuts
(use-package! winum
  :config
  (winum-mode)
;; CTRL + num window shortcuts
  (map! :ne "C-0" #'winum-select-window-0)
  (map! :ne "C-1" #'winum-select-window-1)
  (map! :ne "C-2" #'winum-select-window-2)
  (map! :ne "C-3" #'winum-select-window-3)
  (map! :ne "C-4" #'winum-select-window-4)
  (map! :ne "C-5" #'winum-select-window-5)

;; SPC + num window shortcuts
  (map! :ne "SPC 0" #'winum-select-window-0)
  (map! :ne "SPC 1" #'winum-select-window-1)
  (map! :ne "SPC 2" #'winum-select-window-2)
  (map! :ne "SPC 3" #'winum-select-window-3)
  (map! :ne "SPC 4" #'winum-select-window-4)
  (map! :ne "SPC 5" #'winum-select-window-5)
  (map! :ne "SPC 6" #'winum-select-window-6)
  (map! :ne "SPC 7" #'winum-select-window-7)
  (map! :ne "SPC 8" #'winum-select-window-8)
  (map! :ne "SPC 9" #'winum-select-window-9)
)

;; mouse buttons
(map! :ne [mouse-8] #'better-jumper-jump-backward)
(map! :ne [mouse-9] #'better-jumper-jump-forward)

#+end_src
